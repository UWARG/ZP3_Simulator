/**
 * SensorFusion.cpp
 *
 *    ABSTRACT:
 *      The purpose of this sfunction is to call a simple legacy
 *      function during simulation:
 *
 *         void mainFunc(double u1[3], double u2[3],double u3[1], double u4[1], double u5[1],double u6[1], double u7[1], double u8[1],double u9[1], double u10[1], double u11[1],double u12[1], double u13[1], double u14[1], double u15[1], double u16[1], double u17[1], double u18[1], double u19[1], double u20[1], double u21[1], double u22[1], double u23[1],double u24[1], double u25[1], double u26[1])
 *
 *    Simulink version           : 10.6 (R2022b) 13-May-2022
 *    C++ source code generated on : 20-May-2023 16:57:56
 *
 * THIS S-FUNCTION IS GENERATED BY THE LEGACY CODE TOOL AND MAY NOT WORK IF MODIFIED
 */

/**
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SensorFusion';
     def.OutputFcnSpec = 'void mainFunc(double u1[3], double u2[3],double u3[1], double u4[1], double u5[1],double u6[1], double u7[1], double u8[1],double u9[1], double u10[1], double u11[1],double u12[1], double u13[1], double u14[1], double u15[1], double u16[1], double u17[1], double u18[1], double u19[1], double u20[1], double u21[1], double u22[1], double u23[1],double u24[1], double u25[1], double u26[1])';
     def.HeaderFiles = {'main.h'};
     def.SourceFiles = {'main.cpp'};
     def.IncPaths = {'C:\Users\mahus\Desktop\Warg\ZP3-Simulator\Autopilot\SensorFusion\Src'};
     def.SrcPaths = {'C:\Users\mahus\Desktop\Warg\ZP3-Simulator\Autopilot\SensorFusion\Src'};
     def.Options.language = 'C++';
     legacy_code('sfcn_cmex_generate', def);
     legacy_code('compile', def);
     %%%-MATLAB_Construction_Commands_End
 */

/* Must specify the S_FUNCTION_NAME as the name of the S-function */
#define S_FUNCTION_NAME  SensorFusion
#define S_FUNCTION_LEVEL 2

/**
 * Need to include simstruc.h for the definition of the SimStruct and
 * its associated macro definitions.
 */
#include "simstruc.h"

/* Ensure that this S-Function is compiled with a C++ compiler */
#ifndef __cplusplus
#error This S-Function must be compiled with a C++ compiler. Enter mex('-setup') in the MATLAB Command Window to configure a C++ compiler.
#endif

/* Specific header file(s) required by the legacy code function */
#include "main.h"


/* Function: mdlInitializeSizes ===========================================
 * Abstract:
 *   The sizes information is used by Simulink to determine the S-function
 *   block's characteristics (number of inputs, outputs, states, etc.).
 */
static void mdlInitializeSizes(SimStruct *S)
{
    /* Number of expected parameters */
    ssSetNumSFcnParams(S, 0);


    /* Set the number of work vectors */
    if (!ssSetNumDWork(S, 0)) return;
    ssSetNumPWork(S, 0);

    /* Set the number of input ports */
    if (!ssSetNumInputPorts(S, 26)) return;

    /* Configure the input port 1 */
    ssSetInputPortDataType(S, 0, SS_DOUBLE);
    {
        int_T u1Width = 3;
        ssSetInputPortWidth(S, 0, u1Width);
    }
    ssSetInputPortComplexSignal(S, 0, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 0, 1);
    ssSetInputPortAcceptExprInRTW(S, 0, 0);
    ssSetInputPortOverWritable(S, 0, 0);
    ssSetInputPortOptimOpts(S, 0, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 0, 1);
    ssSetInputPortDimensionsMode(S, 0, FIXED_DIMS_MODE);

    /* Configure the input port 2 */
    ssSetInputPortDataType(S, 1, SS_DOUBLE);
    {
        int_T u2Width = 3;
        ssSetInputPortWidth(S, 1, u2Width);
    }
    ssSetInputPortComplexSignal(S, 1, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 1, 1);
    ssSetInputPortAcceptExprInRTW(S, 1, 0);
    ssSetInputPortOverWritable(S, 1, 0);
    ssSetInputPortOptimOpts(S, 1, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 1, 1);
    ssSetInputPortDimensionsMode(S, 1, FIXED_DIMS_MODE);

    /* Configure the input port 3 */
    ssSetInputPortDataType(S, 2, SS_DOUBLE);
    {
        int_T u3Width = 1;
        ssSetInputPortWidth(S, 2, u3Width);
    }
    ssSetInputPortComplexSignal(S, 2, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 2, 1);
    ssSetInputPortAcceptExprInRTW(S, 2, 0);
    ssSetInputPortOverWritable(S, 2, 0);
    ssSetInputPortOptimOpts(S, 2, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 2, 1);
    ssSetInputPortDimensionsMode(S, 2, FIXED_DIMS_MODE);

    /* Configure the input port 4 */
    ssSetInputPortDataType(S, 3, SS_DOUBLE);
    {
        int_T u4Width = 1;
        ssSetInputPortWidth(S, 3, u4Width);
    }
    ssSetInputPortComplexSignal(S, 3, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 3, 1);
    ssSetInputPortAcceptExprInRTW(S, 3, 0);
    ssSetInputPortOverWritable(S, 3, 0);
    ssSetInputPortOptimOpts(S, 3, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 3, 1);
    ssSetInputPortDimensionsMode(S, 3, FIXED_DIMS_MODE);

    /* Configure the input port 5 */
    ssSetInputPortDataType(S, 4, SS_DOUBLE);
    {
        int_T u5Width = 1;
        ssSetInputPortWidth(S, 4, u5Width);
    }
    ssSetInputPortComplexSignal(S, 4, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 4, 1);
    ssSetInputPortAcceptExprInRTW(S, 4, 0);
    ssSetInputPortOverWritable(S, 4, 0);
    ssSetInputPortOptimOpts(S, 4, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 4, 1);
    ssSetInputPortDimensionsMode(S, 4, FIXED_DIMS_MODE);

    /* Configure the input port 6 */
    ssSetInputPortDataType(S, 5, SS_DOUBLE);
    {
        int_T u6Width = 1;
        ssSetInputPortWidth(S, 5, u6Width);
    }
    ssSetInputPortComplexSignal(S, 5, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 5, 1);
    ssSetInputPortAcceptExprInRTW(S, 5, 0);
    ssSetInputPortOverWritable(S, 5, 0);
    ssSetInputPortOptimOpts(S, 5, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 5, 1);
    ssSetInputPortDimensionsMode(S, 5, FIXED_DIMS_MODE);

    /* Configure the input port 7 */
    ssSetInputPortDataType(S, 6, SS_DOUBLE);
    {
        int_T u7Width = 1;
        ssSetInputPortWidth(S, 6, u7Width);
    }
    ssSetInputPortComplexSignal(S, 6, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 6, 1);
    ssSetInputPortAcceptExprInRTW(S, 6, 0);
    ssSetInputPortOverWritable(S, 6, 0);
    ssSetInputPortOptimOpts(S, 6, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 6, 1);
    ssSetInputPortDimensionsMode(S, 6, FIXED_DIMS_MODE);

    /* Configure the input port 8 */
    ssSetInputPortDataType(S, 7, SS_DOUBLE);
    {
        int_T u8Width = 1;
        ssSetInputPortWidth(S, 7, u8Width);
    }
    ssSetInputPortComplexSignal(S, 7, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 7, 1);
    ssSetInputPortAcceptExprInRTW(S, 7, 0);
    ssSetInputPortOverWritable(S, 7, 0);
    ssSetInputPortOptimOpts(S, 7, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 7, 1);
    ssSetInputPortDimensionsMode(S, 7, FIXED_DIMS_MODE);

    /* Configure the input port 9 */
    ssSetInputPortDataType(S, 8, SS_DOUBLE);
    {
        int_T u9Width = 1;
        ssSetInputPortWidth(S, 8, u9Width);
    }
    ssSetInputPortComplexSignal(S, 8, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 8, 1);
    ssSetInputPortAcceptExprInRTW(S, 8, 0);
    ssSetInputPortOverWritable(S, 8, 0);
    ssSetInputPortOptimOpts(S, 8, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 8, 1);
    ssSetInputPortDimensionsMode(S, 8, FIXED_DIMS_MODE);

    /* Configure the input port 10 */
    ssSetInputPortDataType(S, 9, SS_DOUBLE);
    {
        int_T u10Width = 1;
        ssSetInputPortWidth(S, 9, u10Width);
    }
    ssSetInputPortComplexSignal(S, 9, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 9, 1);
    ssSetInputPortAcceptExprInRTW(S, 9, 0);
    ssSetInputPortOverWritable(S, 9, 0);
    ssSetInputPortOptimOpts(S, 9, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 9, 1);
    ssSetInputPortDimensionsMode(S, 9, FIXED_DIMS_MODE);

    /* Configure the input port 11 */
    ssSetInputPortDataType(S, 10, SS_DOUBLE);
    {
        int_T u11Width = 1;
        ssSetInputPortWidth(S, 10, u11Width);
    }
    ssSetInputPortComplexSignal(S, 10, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 10, 1);
    ssSetInputPortAcceptExprInRTW(S, 10, 0);
    ssSetInputPortOverWritable(S, 10, 0);
    ssSetInputPortOptimOpts(S, 10, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 10, 1);
    ssSetInputPortDimensionsMode(S, 10, FIXED_DIMS_MODE);

    /* Configure the input port 12 */
    ssSetInputPortDataType(S, 11, SS_DOUBLE);
    {
        int_T u12Width = 1;
        ssSetInputPortWidth(S, 11, u12Width);
    }
    ssSetInputPortComplexSignal(S, 11, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 11, 1);
    ssSetInputPortAcceptExprInRTW(S, 11, 0);
    ssSetInputPortOverWritable(S, 11, 0);
    ssSetInputPortOptimOpts(S, 11, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 11, 1);
    ssSetInputPortDimensionsMode(S, 11, FIXED_DIMS_MODE);

    /* Configure the input port 13 */
    ssSetInputPortDataType(S, 12, SS_DOUBLE);
    {
        int_T u13Width = 1;
        ssSetInputPortWidth(S, 12, u13Width);
    }
    ssSetInputPortComplexSignal(S, 12, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 12, 1);
    ssSetInputPortAcceptExprInRTW(S, 12, 0);
    ssSetInputPortOverWritable(S, 12, 0);
    ssSetInputPortOptimOpts(S, 12, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 12, 1);
    ssSetInputPortDimensionsMode(S, 12, FIXED_DIMS_MODE);

    /* Configure the input port 14 */
    ssSetInputPortDataType(S, 13, SS_DOUBLE);
    {
        int_T u14Width = 1;
        ssSetInputPortWidth(S, 13, u14Width);
    }
    ssSetInputPortComplexSignal(S, 13, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 13, 1);
    ssSetInputPortAcceptExprInRTW(S, 13, 0);
    ssSetInputPortOverWritable(S, 13, 0);
    ssSetInputPortOptimOpts(S, 13, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 13, 1);
    ssSetInputPortDimensionsMode(S, 13, FIXED_DIMS_MODE);

    /* Configure the input port 15 */
    ssSetInputPortDataType(S, 14, SS_DOUBLE);
    {
        int_T u15Width = 1;
        ssSetInputPortWidth(S, 14, u15Width);
    }
    ssSetInputPortComplexSignal(S, 14, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 14, 1);
    ssSetInputPortAcceptExprInRTW(S, 14, 0);
    ssSetInputPortOverWritable(S, 14, 0);
    ssSetInputPortOptimOpts(S, 14, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 14, 1);
    ssSetInputPortDimensionsMode(S, 14, FIXED_DIMS_MODE);

    /* Configure the input port 16 */
    ssSetInputPortDataType(S, 15, SS_DOUBLE);
    {
        int_T u16Width = 1;
        ssSetInputPortWidth(S, 15, u16Width);
    }
    ssSetInputPortComplexSignal(S, 15, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 15, 1);
    ssSetInputPortAcceptExprInRTW(S, 15, 0);
    ssSetInputPortOverWritable(S, 15, 0);
    ssSetInputPortOptimOpts(S, 15, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 15, 1);
    ssSetInputPortDimensionsMode(S, 15, FIXED_DIMS_MODE);

    /* Configure the input port 17 */
    ssSetInputPortDataType(S, 16, SS_DOUBLE);
    {
        int_T u17Width = 1;
        ssSetInputPortWidth(S, 16, u17Width);
    }
    ssSetInputPortComplexSignal(S, 16, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 16, 1);
    ssSetInputPortAcceptExprInRTW(S, 16, 0);
    ssSetInputPortOverWritable(S, 16, 0);
    ssSetInputPortOptimOpts(S, 16, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 16, 1);
    ssSetInputPortDimensionsMode(S, 16, FIXED_DIMS_MODE);

    /* Configure the input port 18 */
    ssSetInputPortDataType(S, 17, SS_DOUBLE);
    {
        int_T u18Width = 1;
        ssSetInputPortWidth(S, 17, u18Width);
    }
    ssSetInputPortComplexSignal(S, 17, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 17, 1);
    ssSetInputPortAcceptExprInRTW(S, 17, 0);
    ssSetInputPortOverWritable(S, 17, 0);
    ssSetInputPortOptimOpts(S, 17, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 17, 1);
    ssSetInputPortDimensionsMode(S, 17, FIXED_DIMS_MODE);

    /* Configure the input port 19 */
    ssSetInputPortDataType(S, 18, SS_DOUBLE);
    {
        int_T u19Width = 1;
        ssSetInputPortWidth(S, 18, u19Width);
    }
    ssSetInputPortComplexSignal(S, 18, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 18, 1);
    ssSetInputPortAcceptExprInRTW(S, 18, 0);
    ssSetInputPortOverWritable(S, 18, 0);
    ssSetInputPortOptimOpts(S, 18, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 18, 1);
    ssSetInputPortDimensionsMode(S, 18, FIXED_DIMS_MODE);

    /* Configure the input port 20 */
    ssSetInputPortDataType(S, 19, SS_DOUBLE);
    {
        int_T u20Width = 1;
        ssSetInputPortWidth(S, 19, u20Width);
    }
    ssSetInputPortComplexSignal(S, 19, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 19, 1);
    ssSetInputPortAcceptExprInRTW(S, 19, 0);
    ssSetInputPortOverWritable(S, 19, 0);
    ssSetInputPortOptimOpts(S, 19, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 19, 1);
    ssSetInputPortDimensionsMode(S, 19, FIXED_DIMS_MODE);

    /* Configure the input port 21 */
    ssSetInputPortDataType(S, 20, SS_DOUBLE);
    {
        int_T u21Width = 1;
        ssSetInputPortWidth(S, 20, u21Width);
    }
    ssSetInputPortComplexSignal(S, 20, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 20, 1);
    ssSetInputPortAcceptExprInRTW(S, 20, 0);
    ssSetInputPortOverWritable(S, 20, 0);
    ssSetInputPortOptimOpts(S, 20, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 20, 1);
    ssSetInputPortDimensionsMode(S, 20, FIXED_DIMS_MODE);

    /* Configure the input port 22 */
    ssSetInputPortDataType(S, 21, SS_DOUBLE);
    {
        int_T u22Width = 1;
        ssSetInputPortWidth(S, 21, u22Width);
    }
    ssSetInputPortComplexSignal(S, 21, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 21, 1);
    ssSetInputPortAcceptExprInRTW(S, 21, 0);
    ssSetInputPortOverWritable(S, 21, 0);
    ssSetInputPortOptimOpts(S, 21, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 21, 1);
    ssSetInputPortDimensionsMode(S, 21, FIXED_DIMS_MODE);

    /* Configure the input port 23 */
    ssSetInputPortDataType(S, 22, SS_DOUBLE);
    {
        int_T u23Width = 1;
        ssSetInputPortWidth(S, 22, u23Width);
    }
    ssSetInputPortComplexSignal(S, 22, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 22, 1);
    ssSetInputPortAcceptExprInRTW(S, 22, 0);
    ssSetInputPortOverWritable(S, 22, 0);
    ssSetInputPortOptimOpts(S, 22, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 22, 1);
    ssSetInputPortDimensionsMode(S, 22, FIXED_DIMS_MODE);

    /* Configure the input port 24 */
    ssSetInputPortDataType(S, 23, SS_DOUBLE);
    {
        int_T u24Width = 1;
        ssSetInputPortWidth(S, 23, u24Width);
    }
    ssSetInputPortComplexSignal(S, 23, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 23, 1);
    ssSetInputPortAcceptExprInRTW(S, 23, 0);
    ssSetInputPortOverWritable(S, 23, 0);
    ssSetInputPortOptimOpts(S, 23, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 23, 1);
    ssSetInputPortDimensionsMode(S, 23, FIXED_DIMS_MODE);

    /* Configure the input port 25 */
    ssSetInputPortDataType(S, 24, SS_DOUBLE);
    {
        int_T u25Width = 1;
        ssSetInputPortWidth(S, 24, u25Width);
    }
    ssSetInputPortComplexSignal(S, 24, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 24, 1);
    ssSetInputPortAcceptExprInRTW(S, 24, 0);
    ssSetInputPortOverWritable(S, 24, 0);
    ssSetInputPortOptimOpts(S, 24, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 24, 1);
    ssSetInputPortDimensionsMode(S, 24, FIXED_DIMS_MODE);

    /* Configure the input port 26 */
    ssSetInputPortDataType(S, 25, SS_DOUBLE);
    {
        int_T u26Width = 1;
        ssSetInputPortWidth(S, 25, u26Width);
    }
    ssSetInputPortComplexSignal(S, 25, COMPLEX_NO);
    ssSetInputPortDirectFeedThrough(S, 25, 1);
    ssSetInputPortAcceptExprInRTW(S, 25, 0);
    ssSetInputPortOverWritable(S, 25, 0);
    ssSetInputPortOptimOpts(S, 25, SS_REUSABLE_AND_LOCAL);
    ssSetInputPortRequiredContiguous(S, 25, 1);
    ssSetInputPortDimensionsMode(S, 25, FIXED_DIMS_MODE);

    /* Set the number of output ports */
    if (!ssSetNumOutputPorts(S, 0)) return;

    /* Register reserved identifiers to avoid name conflict */
    if (ssRTWGenIsCodeGen(S) || ssGetSimMode(S)==SS_SIMMODE_EXTERNAL) {

        /* Register reserved identifier for  */
        ssRegMdlInfo(S, "mainFunc", MDL_INFO_ID_RESERVED, 0, 0, ssGetPath(S));

        /* Register reserved identifier for wrappers */
        if (ssRTWGenIsModelReferenceSimTarget(S)) {

            /* Register reserved identifier for  */
            ssRegMdlInfo(S, "mainFunc_wrapper_Output", MDL_INFO_ID_RESERVED, 0, 0, ssGetPath(S));
        } /* if */
    } /* if */

    /* This S-function can be used in referenced model simulating in normal mode */
    ssSetModelReferenceNormalModeSupport(S, MDL_START_AND_MDL_PROCESS_PARAMS_OK);

    /* Set the number of sample time */
    ssSetNumSampleTimes(S, 1);

    /* Set the compliance for the operating point save/restore. */
    ssSetOperatingPointCompliance(S, USE_DEFAULT_OPERATING_POINT);

    ssSetArrayLayoutForCodeGen(S, SS_ALL);

    /* Set the Simulink version this S-Function has been generated in */
    ssSetSimulinkVersionGeneratedIn(S, "10.6");

    /**
     * All options have the form SS_OPTION_<name> and are documented in
     * matlabroot/simulink/include/simstruc.h. The options should be
     * bitwise or'd together as in
     *    ssSetOptions(S, (SS_OPTION_name1 | SS_OPTION_name2))
     */
    ssSetOptions(S,
        SS_OPTION_USE_TLC_WITH_ACCELERATOR |
        SS_OPTION_CAN_BE_CALLED_CONDITIONALLY |
        SS_OPTION_EXCEPTION_FREE_CODE |
        SS_OPTION_WORKS_WITH_CODE_REUSE |
        SS_OPTION_SFUNCTION_INLINED_FOR_RTW |
        SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME
    );
}

/* Function: mdlInitializeSampleTimes =====================================
 * Abstract:
 *   This function is used to specify the sample time(s) for your
 *   S-function. You must register the same number of sample times as
 *   specified in ssSetNumSampleTimes.
 */
static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, INHERITED_SAMPLE_TIME);
    ssSetOffsetTime(S, 0, FIXED_IN_MINOR_STEP_OFFSET);

    #if defined(ssSetModelReferenceSampleTimeDefaultInheritance)
    ssSetModelReferenceSampleTimeDefaultInheritance(S);
    #endif
}

/* Function: mdlOutputs ===================================================
 * Abstract:
 *   In this function, you compute the outputs of your S-function
 *   block. Generally outputs are placed in the output vector(s),
 *   ssGetOutputPortSignal.
 */
static void mdlOutputs(SimStruct *S, int_T tid)
{

    /* Get access to Parameter/Input/Output/DWork data */
    real_T* u1 = (real_T*) ssGetInputPortSignal(S, 0);
    real_T* u2 = (real_T*) ssGetInputPortSignal(S, 1);
    real_T* u3 = (real_T*) ssGetInputPortSignal(S, 2);
    real_T* u4 = (real_T*) ssGetInputPortSignal(S, 3);
    real_T* u5 = (real_T*) ssGetInputPortSignal(S, 4);
    real_T* u6 = (real_T*) ssGetInputPortSignal(S, 5);
    real_T* u7 = (real_T*) ssGetInputPortSignal(S, 6);
    real_T* u8 = (real_T*) ssGetInputPortSignal(S, 7);
    real_T* u9 = (real_T*) ssGetInputPortSignal(S, 8);
    real_T* u10 = (real_T*) ssGetInputPortSignal(S, 9);
    real_T* u11 = (real_T*) ssGetInputPortSignal(S, 10);
    real_T* u12 = (real_T*) ssGetInputPortSignal(S, 11);
    real_T* u13 = (real_T*) ssGetInputPortSignal(S, 12);
    real_T* u14 = (real_T*) ssGetInputPortSignal(S, 13);
    real_T* u15 = (real_T*) ssGetInputPortSignal(S, 14);
    real_T* u16 = (real_T*) ssGetInputPortSignal(S, 15);
    real_T* u17 = (real_T*) ssGetInputPortSignal(S, 16);
    real_T* u18 = (real_T*) ssGetInputPortSignal(S, 17);
    real_T* u19 = (real_T*) ssGetInputPortSignal(S, 18);
    real_T* u20 = (real_T*) ssGetInputPortSignal(S, 19);
    real_T* u21 = (real_T*) ssGetInputPortSignal(S, 20);
    real_T* u22 = (real_T*) ssGetInputPortSignal(S, 21);
    real_T* u23 = (real_T*) ssGetInputPortSignal(S, 22);
    real_T* u24 = (real_T*) ssGetInputPortSignal(S, 23);
    real_T* u25 = (real_T*) ssGetInputPortSignal(S, 24);
    real_T* u26 = (real_T*) ssGetInputPortSignal(S, 25);


    /* Call the legacy code function */
    mainFunc(u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15, u16, u17, u18, u19, u20, u21, u22, u23, u24, u25, u26);
}

/* Function: mdlTerminate =================================================
 * Abstract:
 *   In this function, you should perform any actions that are necessary
 *   at the termination of a simulation.
 */
static void mdlTerminate(SimStruct *S)
{
}

/* Required S-function trailer */
#ifdef    MATLAB_MEX_FILE
# include "simulink.c"
#else
# include "cg_sfun.h"
#endif

